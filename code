#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <sstream>
#include "mpi.h"

struct TrafficControl {
    std::string timestamp;
    int traffic_light_id;
    int No_of_Car_passed;
};

class Traffic_Signal {
private:
    std::vector<TrafficControl> buffer;
    bool fileEnd;

public:
    Traffic_Signal() : fileEnd(false) {}

    void ReadDataFromFile(const std::string& data_txt) {
        std::ifstream file(data_txt);
        if (!file.is_open()) {
            std::cerr << "Error opening file: " << data_txt << std::endl;
            return;
        }

        std::string line;
        while (std::getline(file, line)) {
            std::istringstream iss(line);
            std::string timestamp_str;
            std::string traffic_light_id_str;
            std::string No_of_Car_passed_str;
            if (std::getline(iss, timestamp_str, ',') &&
                std::getline(iss, traffic_light_id_str, ',') &&
                std::getline(iss, No_of_Car_passed_str, ',')) {
                TrafficControl traffic_Data;
                traffic_Data.timestamp = timestamp_str;
                traffic_Data.traffic_light_id = std::stoi(traffic_light_id_str);
                traffic_Data.No_of_Car_passed = std::stoi(No_of_Car_passed_str);
                buffer.push_back(traffic_Data);
            }
        }

        fileEnd = true;
    }

    void Congested_traffic_light(int rank, int size) {
        double start_time = MPI_Wtime();

        std::unordered_map<std::string, std::vector<std::pair<int, int>>> congested_Traffic;

        for (const auto& data : buffer) {
            congested_Traffic[data.timestamp].push_back({data.traffic_light_id, data.No_of_Car_passed});
        }

        for (const auto& entry : congested_Traffic) {
            if (rank == 0) {
                std::cout << "Top congested traffic lights at timestamp: " << entry.first << std::endl;
            }

            std::vector<std::pair<int, int>> congested_Traffic_vec = entry.second;

            std::sort(congested_Traffic_vec.begin(), congested_Traffic_vec.end(),
                      [](const std::pair<int, int>& a, const std::pair<int, int>& b) {
                          return a.second > b.second;
                      });

            std::vector<std::pair<int, int>> topN;
            int N = 5; // Top N congested traffic lights

            for (size_t i = 0; i < congested_Traffic_vec.size() && i < N; ++i) {
                topN.push_back(congested_Traffic_vec[i]);
            }

            // Broadcast top N congested traffic lights
            MPI_Bcast(&topN[0], topN.size() * 2, MPI_INT, 0, MPI_COMM_WORLD);

            if (rank != 0) {
                std::cout << "Top congested traffic lights at timestamp: " << entry.first << std::endl;
            }

            for (const auto& pair : topN) {
                std::cout << "Light ID: " << pair.first << ", Car Count: " << pair.second << std::endl;
            }
        }

        double end_time = MPI_Wtime();
        double execution_time = end_time - start_time;

        double max_execution_time;
        MPI_Reduce(&execution_time, &max_execution_time, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);

        if (rank == 0) {
            std::cout << "Execution time: " << max_execution_time << " seconds" << std::endl;
        }
    }
};

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    Traffic_Signal trafficSignal;
    trafficSignal.ReadDataFromFile("traffic_data.txt");
    trafficSignal.Congested_traffic_light(rank, size);

    MPI_Finalize();
    return 0;
}
